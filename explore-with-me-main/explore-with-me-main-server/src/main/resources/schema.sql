DROP TABLE IF EXISTS participation_request;
DROP TABLE IF EXISTS compilation_event;
DROP TABLE IF EXISTS compilation;
DROP TABLE IF EXISTS event;
DROP TABLE IF EXISTS location;
DROP TABLE IF EXISTS category;
DROP TABLE IF EXISTS users;

CREATE TABLE IF NOT EXISTS users
(
    user_id  BIGINT GENERATED BY DEFAULT AS IDENTITY,
    email    VARCHAR(255) NOT NULL,
    username VARCHAR(255) NOT NULL,
    CONSTRAINT pk_users PRIMARY KEY (user_id),
    CONSTRAINT uq_email UNIQUE (email)
);

CREATE TABLE category
(
    category_id   BIGINT GENERATED BY DEFAULT AS IDENTITY,
    category_name VARCHAR(255) NOT NULL,
    CONSTRAINT pk_category PRIMARY KEY (category_id),
    CONSTRAINT uq_category_name UNIQUE (category_name)
);

CREATE TABLE IF NOT EXISTS location
(
    location_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    latitude    DECIMAL(8, 6) NOT NULL,
    longitude   DECIMAL(9, 6) NOT NULL,
    CONSTRAINT pk_location PRIMARY KEY (location_id),
    CONSTRAINT uq_location UNIQUE (latitude, longitude)
);

CREATE TABLE IF NOT EXISTS event
(
    event_id             BIGINT GENERATED BY DEFAULT AS IDENTITY,
    annotation           VARCHAR(1023)               NOT NULL,
    category_id          BIGINT,
    confirmed_requests   INTEGER      DEFAULT 0,
    description          VARCHAR(2047),
    created_on           TIMESTAMP WITHOUT TIME ZONE,
    event_date           TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    initiator_id         BIGINT,
    location_id          BIGINT,
    is_paid              BOOLEAN                     NOT NULL,
    participant_limit    INTEGER      DEFAULT 0,
    published_on         TIMESTAMP WITHOUT TIME ZONE,
    is_request_moderated BOOLEAN      DEFAULT TRUE,
    state                VARCHAR(255) DEFAULT 'PENDING',
    title                VARCHAR(255)                NOT NULL,
    views                BIGINT       DEFAULT 0,
    CONSTRAINT pk_event PRIMARY KEY (event_id),
    CONSTRAINT fk_event_user FOREIGN KEY (initiator_id) REFERENCES users (user_id),
    CONSTRAINT fk_event_location FOREIGN KEY (location_id) REFERENCES location (location_id),
    CONSTRAINT fk_event_category FOREIGN KEY (category_id) REFERENCES category (category_id),
    CONSTRAINT event_date_publication_date_constraint CHECK ( event_date >= published_on + INTERVAL '1 hour'),
    CONSTRAINT event_date_min CHECK ( event_date >= (NOW()::TIMESTAMP + INTERVAL '2 hours'))
);

CREATE TABLE IF NOT EXISTS participation_request
(
    participation_request_id           BIGINT GENERATED BY DEFAULT AS IDENTITY,
    participation_request_created      TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    participation_request_event_id     BIGINT,
    participation_request_requester_id BIGINT,
    participation_request_status       VARCHAR(255) DEFAULT 'PENDING',
    CONSTRAINT pk_participation_request PRIMARY KEY (participation_request_id),
    CONSTRAINT fk_participation_request_users FOREIGN KEY (participation_request_requester_id) REFERENCES users (user_id),
    CONSTRAINT fk_participation_request_event FOREIGN KEY (participation_request_event_id) REFERENCES event (event_id),
    CONSTRAINT uq_participation_request_requester_event UNIQUE (participation_request_requester_id, participation_request_event_id)
);

CREATE TABLE IF NOT EXISTS compilation
(
    compilation_id        BIGINT GENERATED BY DEFAULT AS IDENTITY,
    compilation_title     VARCHAR(255) NOT NULL,
    compilation_is_pinned BOOLEAN DEFAULT FALSE,
    CONSTRAINT pk_compilation PRIMARY KEY (compilation_id),
    CONSTRAINT uq_compilation_title UNIQUE (compilation_title)
);

CREATE TABLE IF NOT EXISTS compilation_event
(
    compilation_id BIGINT,
    event_id       BIGINT,
    CONSTRAINT pk_compilation_event PRIMARY KEY (compilation_id, event_id),
    CONSTRAINT fk_compilation_event_compilation FOREIGN KEY (compilation_id) REFERENCES compilation (compilation_id),
    CONSTRAINT fk_compilation_event_event FOREIGN KEY (event_id) REFERENCES event (event_id)
);
